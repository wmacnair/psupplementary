plot_top_DE_pathways(p_vals_dt, path_means_dt, predict_dt, params)
q()
source('~/Documents/Code/16_pathstuff/pathstuff04_DE_on_beta_cells.R')
param_idx=5
# set up
params 			= get_params(param_idx)
path_list 		= get_path_list(params$organism_kegg)
# get normalized counts for each gene
tpm_list 		= get_tpm_list(params)
tpm_dt 			= tpm_list[['tpm_dt']]
# remove any zeros
warning('add code to remove genes with 0 total from thresholded data')
predict_dt 		= tpm_list[['predict_dt']]
# get null_list
null_list 		= get_null_list(params)
# calculate path weights
path_weights_dt = calc_path_weights_dt(tpm_dt, null_list)
entrez_lookup 	= make_entrez_lookup(path_weights_dt)
# calculate weighted path sums
path_means_dt 	= calc_path_means_dt(path_weights_dt, tpm_dt)
plot_path_weights_distns(path_means_dt, predict_dt, params)
quit()
dir('~/Desktop')
library('data.table')
sc_datasets = fread('~/Desktop/list of scRNAseq trajectory datasets.txt')
sc_datasets
sc_datasets[, .N, by=trajectory_type]
hist(sc_datasets$n_cells)
hist(log10(sc_datasets$n_cells))
hist(log10(sc_datasets$n_cells))
sc_datasets[ n_cells > 500 ]
setorder(sc_datasets, -n_cells)
sc_datasets
getOption('max.print')
sc_datasets[1:10]
print(sc_datasets, nrows=20)
options(max.print=20)
sc_datasets[1:10]
getOption("max.print")
debugonce(print.data.table)
debugonce(print)
print(sc_datasets, nrows=20)
UseMethod('print')
nrows
topn
topn
nrows
nrows
options()
names(options)
showMethods(options)
names(options())
names(options())[21:40]
options()$datatable.print.nrows
names(options())[41:60]
names(options())$max.print
options()$max.print
options()$max.print = 100
options(max.print = 100)
options()$max.print
sc_datasets
options(max.print = 1000)
sc_datasets
fwrite(sc_datasets, '~/Desktop/ordered_scdatasets.txt', sep='\t')
quit()
pathname= "/Users/macnairw/Documents/Writing/17_psupertime/tables/dataset_perf_table.txt"
timings_dt = fread(pathname)
timings_dt
pathname= "/Users/macnairw/Documents/Writing/17_psupertime/tables/dataset_details_table.txt"
details_dt = fread(pathname)
details_dt
plot_dt = details_dt[ timings_dt, on='niceName']
plot_dt
g = ggplot(plot_dt) + aes(x=nCells, y=timeMean) + geom_point() + theme_bw()
g
g = ggplot(plot_dt) + aes(x=nHvg, y=timeMean) + geom_point() + theme_bw()
g
g = ggplot(plot_dt) + aes(x=nCells, y=timeMean, ymin=timeMean-timeSd, ymax=timeMean+timeSd) + geom_pointrange() + theme_bw()
g
g = ggplot(plot_dt) + aes(x=nCells, y=timeMean, ymin=timeMean-timeSd, ymax=timeMean+timeSd) + geom_pointrange() + scale_x_log10() + scale_y_log10() + theme_bw()
g
g = ggplot(plot_dt) + aes(x=nCells, y=timeMean, ymin=timeMean-timeSd, ymax=timeMean+timeSd, colour=log10(nHvg)) + geom_pointrange() + scale_x_log10() + scale_y_log10() + theme_bw()
g
quit()
BiocManager::install("DelayedArray", version = "3.8")
DelayedArray::colGrid
library('scarn')
library('scran')
quit()
devtools::document('/Users/macnairw/Documents/Code/psupplementary/')
devtools::document('~/Documents/Code/psupertime')
devtools::document('~/Documents/Code/psupplementary')
vignette('psuper_intro')
vignettes('psuper_intro')
vignette('psuper_intro')
?vignette
vignette()
devtools::load_all('~/Documents/Code/psupertime')
vignette('psuper_intro')
vignette()
library('psupertime')
vignette()
browseVignettes(package = 'psupertime')
browseVignettes(package = 'data.table')
quit()
library('psupertime')
devtools::install_github('wmacnair/psupertime')
library('psupertime')
quit()
Sys.getlocale()
devtools::install_github('wmacnair/psupertime')
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
quit()
devtools::install_github('wmacnair/psupertime')
devtools::check('~/Documents/Code/psupertime')
install.packages('rmarkdown')
devtools::check('~/Documents/Code/psupertime')
devtools::check('~/Documents/Code/psupertime')
library('psupertime')
data(acinar_hvg_sce)
y           = acinar_hvg_sce$donor_age
psuper_1se  = psupertime(acinar_hvg_sce, y, sel_genes='all', penalization='1se')
psuper_best = psupertime(acinar_hvg_sce, y, sel_genes='all', penalization='best')
psuper_acc  = psupertime(acinar_hvg_sce, y, sel_genes='all', score='accuracy')
rm(list = ls())
devtools::check('~/Documents/Code/psupertime')
Sys.getenv()
quit()
Sys.getenv()
devtools::check('~/Documents/Code/psupertime')
sessionInfo()
devtools::check('~/Documents/Code/psupplementary')
devtools::check('~/Documents/Code/psupplementary')
library('psupertime')
devtools::check('~/Documents/Code/psupplementary')
sessionInfo()
quit()
devtools::check('~/Documents/Code/psupplementary')
rlang::last_error()
.libPaths()
devtools::install_github('wmacnair/psupertime')
tempdir()
quit()
devtools::install_github('wmacnair/psupertime')
dir(.libPaths()[[1]])
options(max.print=100)
dir(.libPaths()[[1]])
dir(.libPaths()[[1]])[100]
dir(.libPaths()[[1]])[1000]
dir(.libPaths()[[1]])[500]
dir(.libPaths()[[1]])[300]
dir(.libPaths()[[1]])[200]
dir(.libPaths()[[1]])[250]
dir(.libPaths()[[1]])[200:250]
forcats::str_subset(dir(.libPaths[[1]]), 'super')
forcats::str_sub(dir(.libPaths[[1]]), 'super')
stringr::str_subset(dir(.libPaths[[1]]), 'super')
dir(.libPaths[[1]])
dir(.libPaths()[[1]])
stringr::str_subset(dir(.libPaths()[[1]]), 'super')
stringr::str_subset(dir(.libPaths()[[2]]), 'super')
setwd('~/Documents/Code/psupplementary/')
devtools::use_vignette("psupplementary")
library('psupertime')
devtools::install_github('wmacnair/psupertime')
.libPaths()
devtools::install("/Library/Frameworks/R.framework/libs/psupertime/")
devtools::build_vignettes('~/Documents/Code/psupplementary/')
library('psupertime')
library('psupplementary')
quit()
devtools::use_vignette("acinar_analysis")
devtools::use_vignette("unlabelled_colon")
devtools::use_vignette("comparisons")
devtools::build_vignettes()
devtools::load_all()
data(acinar_sce)
acinar_sce
message('identifying highly variable genes')
hvg_params    = list(hvg_cutoff=0.1, bio_cutoff=0.5, span=0.1)
sel_genes     = psupertime:::calc_hvg_genes(acinar_sce, hvg_params)
acinar_hvg    = acinar_sce[sel_genes, ]
acinar_hvg
rm(list = ls())
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
getwd()
buildVignette('vignettes/unlabelled_colon.Rmd')
tools::buildVignette('vignettes/unlabelled_colon.Rmd')
devtools::build_vignettes()
devtools::build_vignettes()
library('psupertime')
devtools::load_all('~/Documents/Code/psupplementary/')
## ------------------------------------------------------------------------
# get data
message('loading acinar cell SCE object')
tag       = 'aging_acinar'
label_name    = 'Donor age\n(years)'
data(acinar_sce)
acinar_sce
# restrict to highly variable genes
message('identifying highly variable genes')
hvg_params    = list(hvg_cutoff=0.1, bio_cutoff=0.5, span=0.1)
sel_genes     = psupertime:::calc_hvg_genes(acinar_sce, hvg_params)
acinar_hvg    = acinar_sce[sel_genes, ]
acinar_hvg
## ---- fig.show='hold', fig.height=5, fig.width=6, fig.cap="UMAP dimensionality reduction"----
# check whether can use umap
if ( !requireNamespace("umap", quietly=TRUE) ) {
message('umap not installed; not doing clustering')
return()
}
library('umap')
# calc and plot umap
message('projecting using UMAP')
x               = t(SummarizedExperiment::assay(acinar_hvg, 'logcounts'))
wellKey_vector  = SingleCellExperiment::colData(acinar_hvg)$wellKey
label_vector    = factor(SingleCellExperiment::colData(acinar_hvg)[['donor_age']])
proj_umap       = calc_umap(x, wellKey_vector)
g               = plot_dim_reduction(label_vector, proj_umap$umap1, proj_umap$umap2,
labels=c('umap1', 'umap2', 'Donor age (years)'))
(g)
## ------------------------------------------------------------------------
# run psupertime
message('running psupertime')
y_age       = acinar_sce$donor_age
psuper_obj  = psupertime(acinar_sce, y_age)
## ---- fig.show='hold', fig.height=4, fig.width=7, fig.cap="Sequential labels plotted over pseudotime values"----
# plot labels over learned psupertime
message('plotting labels over psupertime')
g         = plot_labels_over_psupertime(psuper_obj, label_name)
(g)
## ---- fig.show='hold', fig.height=8, fig.width=6, fig.cap="Diagnostic plot for checking that training worked well"----
# plot training diagnostics
message('plotting psupertime training diagnostics')
g         = plot_train_results(psuper_obj)
(g)
## ---- fig.show='hold', fig.height=6, fig.width=9, fig.cap="Expression profiles of relevant genes over pseudotime"----
# plot identified genes against learned psupertime
message('plotting identified genes over psupertime')
g         = plot_identified_genes_over_psupertime(psuper_obj, label_name)
(g)
# NOT RUN: smaller plot replicating Fig 1E
# g         = plot_identified_genes_over_psupertime(psuper_obj, label_name, n_to_plot=5)
## ---- fig.show='hold', fig.height=3, fig.width=6, fig.cap="Ordering coefficients of relevant genes"----
# plot coefficients for identified genes
message('plotting identified gene coefficients')
g         = plot_identified_gene_coefficients(psuper_obj)
(g)
## ------------------------------------------------------------------------
# check whether can use topGO
if ( !requireNamespace("topGO", quietly=TRUE) ) {
message('topGO not installed; not doing clustering')
return()
}
library('topGO')
# calculate go terms
go_list     = psupertime_go_analysis(psuper_obj, org_mapping='org.Hs.eg.db')
# plot gene cluster profiles
g_profiles  = plot_profiles_of_gene_clusters(go_list, label_name='Donor age\n(years)')
# plot go terms
g_go        = plot_go_results(go_list)
## ------------------------------------------------------------------------
(g_profiles)
## ------------------------------------------------------------------------
(g_go)
calc_umap
(g_go)
dev.off()
plot_selected_cluster_ordering
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
quit()
acinar_vignette <- function() {
library('psupertime')
devtools::load_all('~/Documents/Code/psupplementary/')
## ------------------------------------------------------------------------
# get data
message('loading acinar cell SCE object')
tag       = 'aging_acinar'
label_name    = 'Donor age\n(years)'
data(acinar_sce)
acinar_sce
# restrict to highly variable genes
message('identifying highly variable genes')
hvg_params    = list(hvg_cutoff=0.1, bio_cutoff=0.5, span=0.1)
sel_genes     = psupertime:::calc_hvg_genes(acinar_sce, hvg_params)
acinar_hvg    = acinar_sce[sel_genes, ]
acinar_hvg
## ---- fig.show='hold', fig.height=5, fig.width=6, fig.cap="UMAP dimensionality reduction"----
# check whether can use umap
if ( !requireNamespace("umap", quietly=TRUE) ) {
message('umap not installed; not doing clustering')
return()
}
library('umap')
# calc and plot umap
message('projecting using UMAP')
x               = t(SummarizedExperiment::assay(acinar_hvg, 'logcounts'))
wellKey_vector  = SingleCellExperiment::colData(acinar_hvg)$wellKey
label_vector    = factor(SingleCellExperiment::colData(acinar_hvg)[['donor_age']])
proj_umap       = calc_umap(x, wellKey_vector)
g               = plot_dim_reduction(label_vector, proj_umap$umap1, proj_umap$umap2,
labels=c('umap1', 'umap2', 'Donor age (years)'))
(g)
## ------------------------------------------------------------------------
# run psupertime
message('running psupertime')
y_age       = acinar_sce$donor_age
psuper_obj  = psupertime(acinar_sce, y_age)
## ---- fig.show='hold', fig.height=4, fig.width=7, fig.cap="Sequential labels plotted over pseudotime values"----
# plot labels over learned psupertime
message('plotting labels over psupertime')
g         = plot_labels_over_psupertime(psuper_obj, label_name)
(g)
## ---- fig.show='hold', fig.height=8, fig.width=6, fig.cap="Diagnostic plot for checking that training worked well"----
# plot training diagnostics
message('plotting psupertime training diagnostics')
g         = plot_train_results(psuper_obj)
(g)
## ---- fig.show='hold', fig.height=6, fig.width=9, fig.cap="Expression profiles of relevant genes over pseudotime"----
# plot identified genes against learned psupertime
message('plotting identified genes over psupertime')
g         = plot_identified_genes_over_psupertime(psuper_obj, label_name)
(g)
# NOT RUN: smaller plot replicating Fig 1E
# g         = plot_identified_genes_over_psupertime(psuper_obj, label_name, n_to_plot=5)
## ---- fig.show='hold', fig.height=3, fig.width=6, fig.cap="Ordering coefficients of relevant genes"----
# plot coefficients for identified genes
message('plotting identified gene coefficients')
g         = plot_identified_gene_coefficients(psuper_obj)
(g)
## ------------------------------------------------------------------------
# check whether can use topGO
if ( !requireNamespace("topGO", quietly=TRUE) ) {
message('topGO not installed; not doing clustering')
return()
}
library('topGO')
# calculate go terms
go_list     = psupertime_go_analysis(psuper_obj, org_mapping='org.Hs.eg.db')
# plot gene cluster profiles
g_profiles  = plot_profiles_of_gene_clusters(go_list, label_name='Donor age\n(years)')
# plot go terms
g_go        = plot_go_results(go_list)
## ------------------------------------------------------------------------
(g_profiles)
## ------------------------------------------------------------------------
(g_go)
}
colon_vignette <- function() {
## ------------------------------------------------------------------------
suppressPackageStartupMessages({
library('psupertime')
devtools::load_all('~/Documents/Code/psupplementary/')
library('umap')
library('Seurat')
library('cowplot')
})
## ------------------------------------------------------------------------
# get data
data(colon_sce)
colon_sce
# calculate HVGs
message('calculating highly variable genes')
hvg_params    = list(hvg_cutoff=0.5, bio_cutoff=0, span=0.01)
sel_genes     = psupertime:::calc_hvg_genes(colon_sce, hvg_params)
sce_hvg     = colon_sce[sel_genes, ]
sce_hvg
## ------------------------------------------------------------------------
# do umap, get layout from it
message('doing UMAP projection')
set.seed(1)
umap_obj    = umap(t(SummarizedExperiment::assay(sce_hvg, 'logcounts')))
layout_dt   = data.table(umap_obj$layout)
setnames(layout_dt, names(layout_dt), c('UMAP1', 'UMAP2'))
## ------------------------------------------------------------------------
# do clustering with Seurat
message('unsupervised clustering with Seurat')
clusters    = do_seurat_clustering(sce_hvg)
## ------------------------------------------------------------------------
# add clusters, put in sensible order
layout_dt[, raw_cluster := clusters ]
cluster_order   = data.table(
raw_cluster = factor(as.character(c(0, 1, 2, 3, 4, 5, 6, 7, 8))),
cluster   = factor(as.character(as.integer(c(8, 4, 3, 6, 9, 1, 2, 5, 7))))
)
# cluster_order   = layout_dt[, list(cluster_med = median(UMAP1)), by=raw_cluster]
# cluster_order[, cluster := factor(as.character(rank(cluster_med))) ]
layout_dt     = cluster_order[layout_dt, on='raw_cluster']
# plot unlabelled
message('plotting clusterings')
g_plain = ggplot(layout_dt) +
aes( x=UMAP1, y=UMAP2) +
geom_point(size=3, fill='grey', colour='black', shape=21 ) +
theme_light() +
theme(
axis.text   = element_blank()
)
# plot unsupervised clusters
g_clusters = ggplot(layout_dt) +
aes( x=UMAP1, y=UMAP2, colour=cluster) +
geom_point() +
scale_colour_brewer( palette='Set1' ) +
theme_light() +
theme(
axis.text   = element_blank()
)
## ---- fig.show='hold', fig.height=5, fig.width=6, fig.cap="UMAP dimensionality reduction"----
(g_plain)
## ---- fig.show='hold', fig.height=5, fig.width=6, fig.cap="UMAP dimensionality reduction with clusters"----
(g_clusters)
## ------------------------------------------------------------------------
# define things we want to do
order_list    = list(
c('1', '4', '6', '8'),
c('1', '2', '3', '5', '9')
)
## ------------------------------------------------------------------------
palette         = 'BrBG'
label_name      = 'Selected\nSeurat\nclusters'
profiles_plots  = list()
clusters_plots  = list()
go_plot_list    = list()
ii              = 1
base_size       = 12
# do psupertime on different cluster sequences
message('analysing selected cluster orderings')
for (ii in length(order_list)) {
# get ordering
this_order  = order_list[[ii]]
# define label
tag         = paste0(this_order, collapse='')
message('analysing sequence ', tag)
# do psupertime
y_test_all    = factor(layout_dt$cluster, levels=this_order)
keep_idx    = !is.na(y_test_all)
sce_test    = sce_hvg[, keep_idx]
y_test      = y_test_all[ keep_idx ]
# do psupertime
message('running psupertime on this sequence')
psuper_obj    = psupertime(sce_test, y_test, sel_genes='all')
# plot selected cluster ordering
message('plotting selected sequence over UMAP')
g         = plot_selected_cluster_ordering(layout_dt, this_order)
clusters_plots[[ii]] = g
# plot genes identified
message('plotting genes over identified psupertime')
g         = plot_identified_genes_over_psupertime(psuper_obj, label_name='Ordered\nSeurat\nclusters', palette=palette, n_to_plot=20)
profiles_plots[[ii]] = g
# do go stuff
message('GO enrichment analysis of gene clusters')
go_list     = psupertime_go_analysis(psuper_obj, org_mapping='org.Mm.eg.db')
# assemble supplementary plots
message('plotting enrichment results')
go_plot_list[[2*(ii-1) + 1]]  = plot_profiles_of_gene_clusters(go_list, label_name=label_name, palette=palette)
go_plot_list[[2*(ii-1) + 2]]  = plot_go_results(go_list) + theme( axis.text=element_text(size=6))
}
## ---- fig.show='hold', fig.height=5, fig.width=6, fig.cap="Selected cluster sequence 1"----
(clusters_plots[[1]])
## ---- fig.show='hold', fig.height=5, fig.width=6, fig.cap="Selected cluster sequence 2"----
(clusters_plots[[2]])
## ---- fig.show='hold', fig.height=6, fig.width=9, fig.cap="Genes identified for cluster sequence 1"----
(profiles_plots[[1]])
## ---- fig.show='hold', fig.height=6, fig.width=9, fig.cap="Genes identified for cluster sequence 2"----
(profiles_plots[[2]])
## ---- fig.show='hold', fig.height=10, fig.width=8, fig.cap=""------------
# plot supplementary
message('larger plot of enrichment results')
g       = plot_grid(plotlist=go_plot_list, labels=LETTERS[1:4], ncol=2, align='h', axis='b')
(g)
}
start_t = Sys.time()
acinar_vignette()
colon_vignette()
end_t = Sys.time()
print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
BiocManager::install("BiocStyle", version = "3.8")
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
installr::install.ImageMagick()
install.packages('installr')
BiocManager::install('installr')
install.packages('installr')
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(pkg='~/Documents/Code/psupertime/'); end_t = Sys.time(); print(end_t-start_t)
start_t = Sys.time(); devtools::build_vignettes(); end_t = Sys.time(); print(end_t-start_t)
quit()
.libPaths()
quit()
